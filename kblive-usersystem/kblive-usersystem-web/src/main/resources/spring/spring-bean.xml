<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns="http://www.springframework.org/schema/beans"
       xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

    <import resource="test-bean.xml"/>

    <context:annotation-config/>

    <!-- 使用annotation 自动注册bean,并检查@Required,@Autowired的属性已被注入 -->
    <context:component-scan base-package="com.kblive.usersystem"/>

    <!--<task:annotation-driven/>-->

    <bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <!-- 核心线程数 -->
        <property name="corePoolSize" value="4"/>
        <!-- 最大线程数 -->
        <property name="maxPoolSize" value="4"/>
        <!-- 队列最大长度 -->
        <property name="queueCapacity" value="10000"/>
        <!-- 线程池维护线程所允许的空闲时间，默认为60s -->
        <property name="keepAliveSeconds" value="60"/>
        <property name="rejectedExecutionHandler">
            <bean class="java.util.concurrent.ThreadPoolExecutor$DiscardPolicy"/>
        </property>
    </bean>

    <!--当spring-bean配置文件中有多个类型相同的bean时，一定要使用id或qualifier来区分他们，否则使用@Autowired注解来注入bean的时候会报错-->
    <bean id="userService1" class="com.kblive.usersystem.services.user.UserService">

    </bean>

    <bean class="com.kblive.usersystem.services.user.UserService">
        <qualifier value="userService2">
        </qualifier>
    </bean>

    <!-- 非静态工厂方法:工厂方法是非静态的，即必须实例化工厂类后才能调用工厂方法。-->
    <bean id="carFactory" class="com.kblive.usersystem.web.car.CarFactory">
    </bean>
    <bean id="car" factory-bean="carFactory" factory-method="createHongQiCar">
    </bean>
    <!--工厂类都是静态的，这意味着用户在无须创建工厂类实例的情况下就可以调用工厂类方法，因此，静态工厂方法比非静态工厂方法的调用更加方便。-->
    <bean id="car6" class="com.kblive.usersystem.web.car.CarFactory"
          factory-method="createCar">
    </bean>

    <bean id="bizAspectBean12" class="com.kblive.usersystem.web.aspect.Biz">
    </bean>

    <!--aop 配置-->
    <aop:config>
        <aop:aspect id="bizAspect" ref="bizAspectBean12">
            <!--允许一个切面声明一個实现指定接口的通知对象，并提供了一個接口实现类来代替这些对象-->
            <aop:declare-parents types-matching="com.kblive.usersystem.web.aspect.*+"
                                 implement-interface="com.kblive.usersystem.web.aspect.IBiz"
                                 default-impl="com.kblive.usersystem.web.aspect.BizImpl"/>
            <aop:pointcut id="bizPointCut" expression="execution(* com.kblive.usersystem.dao.*.*.*(..))"/>
            <!--            <aop:before pointcut-ref="bizPointCut" method="before" />-->
            <!--            <aop:after pointcut-ref="bizPointCut" method="after" />-->
            <!--            <aop:after-returning pointcut-ref="bizPointCut" method="afterReturning" />-->
            <!--            <aop:around pointcut-ref="bizPointCut" method="around" />-->
            <!--            <aop:after-throwing pointcut-ref="bizPointCut" method="afterThrowing" />-->
            <aop:before pointcut-ref="bizPointCut" method="before"/>

        </aop:aspect>

    </aop:config>

    <bean id="afterAdvice" class="com.kblive.usersystem.web.proxy.proxyinterfce.AfterAdvice">
    </bean>
    <bean id="beforeAdvice" class="com.kblive.usersystem.web.proxy.proxyinterfce.BeforeAdvice">
    </bean>
    <bean id="methodInterceptor" class="com.kblive.usersystem.web.proxy.proxyinterfce.MethodInterceptor">
    </bean>

    <bean id="studentTarget" class="com.kblive.usersystem.web.proxy.proxyinterfce.StudentImpl">
    </bean>

    <!--使用spring api-NameMatchMethodPointcut定义一個切入点-->
    <bean id="pointCut" class="org.springframework.aop.support.NameMatchMethodPointcut">
        <property name="mappedNames">
            <list>
                <value>sa*</value>
            </list>
        </property>
    </bean>

    <!--
        使用spring api-DefaultBeanFactoryPointcutAdvisor定义一默认的advisor,
        使得只有调用匹配到切点里面的方法时才调用通知
     -->
    <bean id="defaultAdvisor" class="org.springframework.aop.support.DefaultBeanFactoryPointcutAdvisor">
        <property name="advice" ref="beforeAdvice">
        </property>
        <property name="pointcut" ref="pointCut">
        </property>
    </bean>

    <!--
        1.使用ProxyFactoryBean或者其它IoC相关类来创建AOP代理的最重要好处是通知和切入点也可以由IoC来管理
        2.被代理类没有实现任何接口,使用CGLIB代理,否则JDK代理,通过设置proxyTargetClass为true ,可强制使用CGLIB
        3.如果目标类实现了一-个(或者多个)接口,那么创建代理的类型将依赖ProxyFactoryBean的配置
        4.如果ProxyFactoryBean的proxyInterfaces属性被设置为一个或者多个全限定接口名,基于JDK的代理将被创建
        5.如果ProxyFactoryBean的proxyInterfaces属性没有被设置,但是目标类实现了- -个(或者更多)接口,那么
          ProxyFactoryBean将自动检测到这个目标类已经实现了至少一个接口,创建-个基于JDK的代理。
     -->
    <bean id="studentProxy" class="org.springframework.aop.framework.ProxyFactoryBean">
        <property name="target" ref="studentTarget">
        </property>
        <property name="proxyInterfaces" value="com.kblive.usersystem.web.proxy.proxyinterfce.IStudent">
        </property>
        <property name="proxyTargetClass" value="true">
        </property>
        <property name="interceptorNames">
            <list>
                <value>defaultAdvisor</value>
                <value>beforeAdvice</value>
                <value>methodInterceptor</value>
                <value>afterAdvice</value>
            </list>
        </property>
    </bean>

</beans>